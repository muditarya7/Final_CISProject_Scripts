# -*- coding: utf-8 -*-
"""3yagi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FybIYSbmQYmpV-WYwQp8Ki1Cfl1yAEKB
"""

!pip install hub

!pip install fairseq

import torch
import torch.nn as nn
from fairseq.models.wav2vec import wav2vec2, TransformerEncoder
from fairseq.dataclass.utils import convert_namespace_to_omegaconf
from argparse import Namespace
from omegaconf import OmegaConf
from torch.nn import TransformerEncoderLayer
import torch.optim as optim
from torch.optim import lr_scheduler

# Define your arguments in a structured way that aligns with Fairseq's expected configuration
args = Namespace(
    encoder_embed_dim=768,
    encoder_layers=12,
    encoder_layerdrop=0.05,
    dropout=0.1,
    attention_dropout=0.1,
    activation_dropout=0,
    dropout_input=0.1,
    final_dim=0,
    layer_norm_first=False,
    conv_feature_layers='[(512, 10, 5)]',
    conv_pos=512,
    conv_pos_groups=16,
    encoder_ffn_embed_dim=3072,
    encoder_attention_heads=12,
    activation_fn='gelu',
)

# Convert Namespace to Fairseq's Wav2Vec2Config
config = wav2vec2.Wav2Vec2Config.from_namespace(args)

class DeCoAR2(nn.Module):
    def __init__(self):
        super(DeCoAR2, self).__init__()
        # Adjust the input feature size to match the actual data
        self.linear = nn.Linear(14400, 768)
        self.bn = nn.BatchNorm1d(768)
        self.dropout = nn.Dropout(0.3)
        self.transformer = TransformerEncoderLayer(d_model=768, nhead=12, dropout=0.1)
        self.output_layer = nn.Linear(768, 10)  # Assuming 10 output classes

    def forward(self, x):
        x = x.view(x.size(0), -1)  # Ensure input is flattened if necessary
        x = self.linear(x)
        x = self.bn(x)
        x = self.dropout(x)
        x = x.unsqueeze(1)  # Ensure transformer receives correct input shape
        x = self.transformer(x)
        x = x.squeeze(1)  # Prepare for the final output layer
        x = self.output_layer(x)
        return x


model = DeCoAR2()
# Training enhancements
optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=0.01)
scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min')

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset
import torchaudio
import torchaudio.transforms as T
from fairseq.models.wav2vec import TransformerEncoder, wav2vec2

import zipfile
import os
import numpy as np
from sklearn.model_selection import train_test_split
import torch
from torch.utils.data import DataLoader, TensorDataset

# Path to the zip file and extraction directory
zip_file_path = '/content/3yagi_EMISPEECH_DATA_AUDIO.zip'  # Replace with your path to the zip file
extraction_path = '/content/3yagi_EMISPEECH_DATA_AUDIO'  # Replace with your desired extraction path

# Unzip the file
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(extraction_path)

import os
import pickle
import numpy as np
from sklearn.model_selection import train_test_split

# Assuming '/mnt/data/3yagi/' is the directory with your .pkl files
data_dir = '/content/3yagi_EMISPEECH_DATA_AUDIO/3yagi_EMISPEECH_DATA_AUDIO'
file_list = os.listdir(data_dir)

# Load the data from each .pkl file and concatenate them
all_features = []
all_labels = []
for file_name in file_list:
    if file_name.endswith('.pkl'):
        file_path = os.path.join(data_dir, file_name)
        with open(file_path, 'rb') as file:
            data_list = pickle.load(file)
            for feature_tensor, label_tuple in data_list:
                # Convert feature tensor to numpy and label tensor to int
                all_features.append(feature_tensor.numpy())  # Ensure feature_tensor is indeed a tensor
                all_labels.append(label_tuple[0].item())  # Extract the integer label

# Convert lists to numpy arrays
all_features_np = np.stack(all_features)  # Stack features arrays
all_labels_np = np.array(all_labels)      # Convert labels list to a numpy array

# Split the data into train and test sets
train_features, test_features, train_labels, test_labels = train_test_split(
    all_features_np, all_labels_np, test_size=0.2, random_state=42
)

# Convert numpy arrays to PyTorch tensors
train_features_tensor = torch.tensor(train_features, dtype=torch.float32)
test_features_tensor = torch.tensor(test_features, dtype=torch.float32)
train_labels_tensor = torch.tensor(train_labels, dtype=torch.long)
test_labels_tensor = torch.tensor(test_labels, dtype=torch.long)

import torch
from torch.utils.data import TensorDataset, DataLoader

# Assuming train_features_tensor and train_labels_tensor are already created as torch Tensors
train_dataset = TensorDataset(train_features_tensor, train_labels_tensor)
test_dataset = TensorDataset(test_features_tensor, test_labels_tensor)

# Create DataLoaders for the train and test sets
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

# Output dataset and DataLoader sizes
print(f"Train dataset size: {len(train_dataset)}")
print(f"Test dataset size: {len(test_dataset)}")
print(f"Train DataLoader size (batches): {len(train_loader)}")
print(f"Test DataLoader size (batches): {len(test_loader)}")

# If you need to print the shape
sample_train_features, sample_train_labels = next(iter(train_loader))
print(f"Shape of train features in one batch: {sample_train_features.shape}")
print(f"Shape of train labels in one batch: {sample_train_labels.shape}")

# Similarly for test data
sample_test_features, sample_test_labels = next(iter(test_loader))
print(f"Shape of test features in one batch: {sample_test_features.shape}")
print(f"Shape of test labels in one batch: {sample_test_labels.shape}")

import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim.lr_scheduler import StepLR

# Assuming DeCoAR2 is already defined and imported
model = DeCoAR2()
if torch.cuda.is_available():
    model.cuda()

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.0001)
scheduler = StepLR(optimizer, step_size=1, gamma=0.002)  # Reduce LR every epoch

num_epochs = 100
for epoch in range(num_epochs):
    model.train()
    total_train_loss = 0
    total_train_correct = 0
    total_train_samples = 0

    for mel_specs, labels in train_loader:
        if torch.cuda.is_available():
            mel_specs, labels = mel_specs.cuda(), labels.cuda()

        labels = labels.squeeze()

        optimizer.zero_grad()
        outputs = model(mel_specs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        total_train_loss += loss.item()
        _, predicted = torch.max(outputs.data, 1)
        total_train_correct += (predicted == labels).sum().item()
        total_train_samples += labels.size(0)

    scheduler.step()  # Adjust learning rate

    average_train_loss = total_train_loss / len(train_loader)
    train_accuracy = 100 * total_train_correct / total_train_samples

    print(f'Epoch {epoch + 1}/{num_epochs}, Train Loss: {average_train_loss:.4f}, Train Accuracy: {train_accuracy:.2f}%')