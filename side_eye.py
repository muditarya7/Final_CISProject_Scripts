# -*- coding: utf-8 -*-
"""side_eye.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ihxvb697Ue2LiXCqRiVGgan66roGJGVV
"""

# -*- coding: utf-8 -*-
"""maineye_final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JbwTYPOe2NYKu4AfhUy8e2N7Wb6jUS-o
"""

!pip install hub

!pip install fairseq



import torch
import torch.nn as nn
from fairseq.models.wav2vec import wav2vec2, TransformerEncoder
from fairseq.dataclass.utils import convert_namespace_to_omegaconf
from argparse import Namespace
from omegaconf import OmegaConf
from torch.nn import TransformerEncoderLayer
import torch.optim as optim
from torch.optim import lr_scheduler


args = Namespace(
    encoder_embed_dim=768,
    encoder_layers=12,
    encoder_layerdrop=0.05,
    dropout=0.1,
    attention_dropout=0.1,
    activation_dropout=0,
    dropout_input=0.1,
    final_dim=0,
    layer_norm_first=False,
    conv_feature_layers='[(512, 10, 5)]',
    conv_pos=512,
    conv_pos_groups=16,
    encoder_ffn_embed_dim=3072,
    encoder_attention_heads=12,
    activation_fn='gelu',
)

# Convert Namespace to Fairseq's Wav2Vec2Config
config = wav2vec2.Wav2Vec2Config.from_namespace(args)

class DeCoAR2(nn.Module):
    def __init__(self):
        super(DeCoAR2, self).__init__()
        self.linear = nn.Linear(10, 768)
        self.bn = nn.BatchNorm1d(768)
        self.dropout = nn.Dropout(0.3)
        self.transformer = TransformerEncoderLayer(d_model=768, nhead=12, dropout=0.1)
        self.output_layer = nn.Linear(768, 10)

    def forward(self, x):
        x = x.view(x.size(0), -1)
        x = self.linear(x)
        x = self.bn(x)
        x = self.dropout(x)
        x = x.unsqueeze(1)
        x = self.transformer(x)
        x = x.squeeze(1)
        x = self.output_layer(x)
        return x


model = DeCoAR2()
# Training enhancements
optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=0.01)
scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min')

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset
import torchaudio
import torchaudio.transforms as T
from fairseq.models.wav2vec import TransformerEncoder, wav2vec2

from google.colab import drive
drive.mount('/content/drive')

import zipfile
import os

# Path to your zip file
zip_path = '/content/drive/MyDrive/EXT_DATA_AUDIO.zip'

# Directory where you want to extract the contents
extract_path = '/content/EXT_DATA_AUDIO'

# Create the directory if it does not exist
os.makedirs(extract_path, exist_ok=True)

# Extract the zip file
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)


print(os.listdir(extract_path))

import os
import pickle
import numpy as np
from sklearn.model_selection import train_test_split
import torch
from torch.utils.data import Dataset, DataLoader

# Define a custom Dataset class
class CustomDataset(Dataset):
    def __init__(self, data_files):
        self.data_files = data_files

    def __len__(self):
        return len(self.data_files)

    def __getitem__(self, idx):
        with open(self.data_files[idx], 'rb') as file:
            data_list = pickle.load(file)
            features, labels = [], []
            for feature_tensor, label_tuple in data_list:
                features.append(feature_tensor.numpy())
                labels.append(label_tuple[0].item())
            features_np = np.stack(features)
            labels_np = np.array(labels)
            return torch.tensor(features_np, dtype=torch.float32), torch.tensor(labels_np, dtype=torch.long)


def load_and_split_data(data_dir):
    file_list = [os.path.join(data_dir, f) for f in os.listdir(data_dir) if f.endswith('.pkl')]

    train_files, test_files = train_test_split(file_list, test_size=0.2, random_state=42)
    return train_files, test_files


data_dir = '/content/EXT_DATA_AUDIO/EXT_DATA_AUDIO'
train_files, test_files = load_and_split_data(data_dir)
train_dataset = CustomDataset(train_files)
test_dataset = CustomDataset(test_files)


train_loader = DataLoader(train_dataset, batch_size=10, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=10, shuffle=False)


for features, labels in train_loader:
    print("Features shape:", features.shape)
    print("Labels shape:", labels.shape)


import torch
from torch.utils.data import TensorDataset, DataLoader


if 'train_features_tensor' not in locals() or 'train_labels_tensor' not in locals():

    train_features_tensor = torch.randn(100, 10)  # 100 samples, 10 features each
    train_labels_tensor = torch.randint(0, 2, (100,))  # 100 labels (binary classification)

if 'test_features_tensor' not in locals() or 'test_labels_tensor' not in locals():
    test_features_tensor = torch.randn(40, 10)  # 40 samples, 10 features each
    test_labels_tensor = torch.randint(0, 2, (40,))  # 40 labels


train_dataset = TensorDataset(train_features_tensor, train_labels_tensor)
test_dataset = TensorDataset(test_features_tensor, test_labels_tensor)


train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)


print(f"Train dataset size: {len(train_dataset)}")
print(f"Test dataset size: {len(test_dataset)}")
print(f"Train DataLoader size (batches): {len(train_loader)}")
print(f"Test DataLoader size (batches): {len(test_loader)}")


sample_train_features, sample_train_labels = next(iter(train_loader))
print(f"Shape of train features in one batch: {sample_train_features.shape}")
print(f"Shape of train labels in one batch: {sample_train_labels.shape}")

sample_test_features, sample_test_labels = next(iter(test_loader))
print(f"Shape of test features in one batch: {sample_test_features.shape}")
print(f"Shape of test labels in one batch: {sample_test_labels.shape}")

import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim.lr_scheduler import StepLR
import matplotlib.pyplot as plt


model = DeCoAR2()
if torch.cuda.is_available():
    model.cuda()

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.0001)
scheduler = StepLR(optimizer, step_size=1, gamma=0.002)

num_epochs = 100
train_accuracies = []

for epoch in range(num_epochs):
    model.train()
    total_train_loss = 0
    total_train_correct = 0
    total_train_samples = 0

    for mel_specs, labels in train_loader:
        if torch.cuda.is_available():
            mel_specs, labels = mel_specs.cuda(), labels.cuda()

        labels = labels.squeeze()

        optimizer.zero_grad()
        outputs = model(mel_specs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        total_train_loss += loss.item()
        _, predicted = torch.max(outputs.data, 1)
        total_train_correct += (predicted == labels).sum().item()
        total_train_samples += labels.size(0)

    scheduler.step()

    average_train_loss = total_train_loss / len(train_loader)
    train_accuracy = 100 * total_train_correct / total_train_samples
    train_accuracies.append(train_accuracy)

    print(f'Epoch {epoch + 1}/{num_epochs}, Train Loss: {average_train_loss:.4f}, Train Accuracy: {train_accuracy:.2f}%')


plt.figure(figsize=(10, 5))
plt.plot(range(1, num_epochs+1), train_accuracies, marker='o', linestyle='-', color='b')
plt.title('Training Accuracy over Epochs')
plt.xlabel('Epoch')
plt.ylabel('Accuracy (%)')
plt.grid(True)
plt.xticks(range(1, num_epochs+1))
plt.show()